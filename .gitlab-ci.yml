image: docker:latest

services:
  - docker:dind

variables:
  IMAGE_NAME: yunusjonov/gitlab-ci-cd
  IMAGE_TAG: latest

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job: # This job runs in the build stage, which runs first.
  stage: build
  image: maven:3.8.6-openjdk-18
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  artifacts:
    paths:
      - target/*.jar
  script:
    - mvn package -B
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

unit-test-job: # This job runs in the test stage.
  stage: test    # ItIMAGE_NAME only starts when the job in the build stage completes successfully.
  script:
    - echo "hello"

#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."

deploy:
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY # SSH_KEY was generated by keygen and it helps connecting to server#
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY root@165.22.49.38 "
      docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD &&
      docker build -t $IMAGE_NAME:$IMAGE_TAG . &&
      docker push $IMAGE_NAME:$IMAGE_TAG &&
      docker ps -aq | xargs docker stop | xargs docker rm &&
      docker run -d -p 8080:8080 $IMAGE_NAME:$IMAGE_TAG"

#
#docker-build:
#  stage: deploy
#  script:
#    docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN _registry.gitlab.com
#    -docker build -t registry.gitlab.com/yogonza524/$REPO.
#    docker push registry.gitlab.com/yogonza524/$REPO
